#!/usr/bin/env python3
"""
Script para ejecutar la migraci√≥n PEP (Persona Pol√≠ticamente Expuesta)
Agrega campos para identificar clientes con exposici√≥n pol√≠tica
"""

import os
import sys
import asyncio
import asyncpg
from pathlib import Path

# Agregar el directorio del proyecto al path
sys.path.append(str(Path(__file__).parent))

from app.core.config import settings

async def run_migration():
    """Ejecuta la migraci√≥n PEP"""
    
    # Leer el archivo de migraci√≥n
    migration_file = Path(__file__).parent / "migrations" / "003_add_pep_fields.sql"
    
    if not migration_file.exists():
        print(f"‚ùå Error: No se encontr√≥ el archivo de migraci√≥n: {migration_file}")
        return False
    
    try:
        # Conectar a la base de datos
        print("üîó Conectando a la base de datos...")
        conn = await asyncpg.connect(settings.DATABASE_URL)
        
        # Leer el contenido de la migraci√≥n
        print("üìñ Leyendo archivo de migraci√≥n...")
        with open(migration_file, 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        # Verificar si la migraci√≥n ya fue aplicada
        print("üîç Verificando estado de migraciones...")
        existing = await conn.fetchval(
            "SELECT version FROM schema_migrations WHERE version = '003'"
        )
        
        if existing:
            print("‚úÖ La migraci√≥n 003 ya fue aplicada anteriormente.")
            await conn.close()
            return True
        
        # Ejecutar la migraci√≥n
        print("üöÄ Ejecutando migraci√≥n PEP...")
        await conn.execute(migration_sql)
        
        print("‚úÖ Migraci√≥n PEP ejecutada exitosamente!")
        
        # Verificar que los campos fueron agregados
        print("üîç Verificando campos agregados...")
        columns = await conn.fetch("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'cliente_trabajos' 
            AND column_name IN ('es_pep', 'es_gobierno', 'cargo_eleccion_popular', 'familiar_pep')
            ORDER BY column_name
        """)
        
        print("\nüìã Campos PEP agregados:")
        for col in columns:
            print(f"  ‚Ä¢ {col['column_name']}: {col['data_type']} (nullable: {col['is_nullable']}, default: {col['column_default']})")
        
        # Verificar √≠ndices creados
        print("\nüîç Verificando √≠ndices PEP...")
        indexes = await conn.fetch("""
            SELECT indexname, indexdef 
            FROM pg_indexes 
            WHERE tablename = 'cliente_trabajos' 
            AND indexname LIKE '%pep%' OR indexname LIKE '%gobierno%' OR indexname LIKE '%cargo%'
            ORDER BY indexname
        """)
        
        print("\nüìä √çndices PEP creados:")
        for idx in indexes:
            print(f"  ‚Ä¢ {idx['indexname']}")
        
        # Verificar vista creada
        print("\nüîç Verificando vista de clientes PEP...")
        view_exists = await conn.fetchval("""
            SELECT COUNT(*) FROM information_schema.views 
            WHERE table_name = 'vista_clientes_pep'
        """)
        
        if view_exists:
            print("‚úÖ Vista 'vista_clientes_pep' creada exitosamente")
        else:
            print("‚ùå Error: Vista 'vista_clientes_pep' no fue creada")
        
        # Verificar funciones creadas
        print("\nüîç Verificando funciones PEP...")
        functions = await conn.fetch("""
            SELECT proname, prosrc 
            FROM pg_proc 
            WHERE proname IN ('obtener_nivel_exposicion_cliente', 'requiere_due_diligence_reforzada')
        """)
        
        print("\n‚öôÔ∏è Funciones PEP creadas:")
        for func in functions:
            print(f"  ‚Ä¢ {func['proname']}")
        
        # Mostrar datos de ejemplo insertados
        print("\nüîç Verificando datos de ejemplo...")
        ejemplos = await conn.fetch("""
            SELECT empresa, puesto, es_pep, es_gobierno, cargo_eleccion_popular, tipo_entidad_publica, nivel_cargo
            FROM cliente_trabajos 
            WHERE es_gobierno = TRUE OR es_pep = TRUE
            ORDER BY created_at DESC
            LIMIT 5
        """)
        
        if ejemplos:
            print("\nüìù Datos de ejemplo insertados:")
            for ej in ejemplos:
                flags = []
                if ej['es_pep']: flags.append("PEP")
                if ej['es_gobierno']: flags.append("GOB")
                if ej['cargo_eleccion_popular']: flags.append("ELEC")
                
                flag_str = f" [{', '.join(flags)}]" if flags else ""
                print(f"  ‚Ä¢ {ej['empresa']} - {ej['puesto']}{flag_str}")
                print(f"    Entidad: {ej['tipo_entidad_publica']}, Nivel: {ej['nivel_cargo']}")
        
        await conn.close()
        
        print("\nüéâ ¬°Migraci√≥n PEP completada exitosamente!")
        print("\nüìã Resumen de cambios:")
        print("  ‚úÖ 12 campos PEP agregados a cliente_trabajos")
        print("  ‚úÖ 7 √≠ndices optimizados creados")
        print("  ‚úÖ 1 vista de consulta creada (vista_clientes_pep)")
        print("  ‚úÖ 2 funciones de utilidad creadas")
        print("  ‚úÖ Datos de ejemplo insertados")
        
        print("\nüîß Funcionalidades disponibles:")
        print("  ‚Ä¢ Identificaci√≥n de Personas Pol√≠ticamente Expuestas (PEP)")
        print("  ‚Ä¢ Clasificaci√≥n por nivel de exposici√≥n (ALTO/MEDIO/BAJO/NINGUNO)")
        print("  ‚Ä¢ Detecci√≥n de cargos de elecci√≥n popular")
        print("  ‚Ä¢ Identificaci√≥n de familiares y asociados de PEP")
        print("  ‚Ä¢ Marcado para due diligence reforzada")
        print("  ‚Ä¢ Consultas optimizadas con √≠ndices especializados")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error ejecutando migraci√≥n: {str(e)}")
        if 'conn' in locals():
            await conn.close()
        return False

async def test_pep_functionality():
    """Prueba las funcionalidades PEP implementadas"""
    
    try:
        print("\nüß™ Probando funcionalidades PEP...")
        conn = await asyncpg.connect(settings.DATABASE_URL)
        
        # Probar vista de clientes PEP
        pep_clients = await conn.fetch("SELECT * FROM vista_clientes_pep LIMIT 3")
        
        if pep_clients:
            print("\nüë• Clientes PEP encontrados:")
            for client in pep_clients:
                print(f"  ‚Ä¢ {client['nombre_cliente']} {client['apellido_paterno']}")
                print(f"    Empresa: {client['empresa']}")
                print(f"    Puesto: {client['puesto']}")
                print(f"    Nivel exposici√≥n: {client['nivel_exposicion_politica']}")
                print(f"    Due diligence reforzada: {'S√≠' if client['requiere_due_diligence_reforzada'] else 'No'}")
                print()
        
        # Probar funci√≥n de nivel de exposici√≥n
        if pep_clients:
            cliente_id = pep_clients[0]['cliente_id']
            nivel = await conn.fetchval(
                "SELECT obtener_nivel_exposicion_cliente($1)", cliente_id
            )
            print(f"üéØ Nivel de exposici√≥n del cliente {cliente_id}: {nivel}")
            
            # Probar funci√≥n de due diligence
            requiere_dd = await conn.fetchval(
                "SELECT requiere_due_diligence_reforzada($1)", cliente_id
            )
            print(f"üîç Requiere due diligence reforzada: {'S√≠' if requiere_dd else 'No'}")
        
        await conn.close()
        print("\n‚úÖ Pruebas de funcionalidad PEP completadas exitosamente!")
        
    except Exception as e:
        print(f"‚ùå Error en pruebas PEP: {str(e)}")
        if 'conn' in locals():
            await conn.close()

def main():
    """Funci√≥n principal"""
    print("üèõÔ∏è MIGRACI√ìN PEP - PERSONAS POL√çTICAMENTE EXPUESTAS")
    print("=" * 60)
    print("Esta migraci√≥n agrega funcionalidad para identificar clientes")
    print("con exposici√≥n pol√≠tica seg√∫n regulaciones financieras.")
    print("=" * 60)
    
    # Ejecutar migraci√≥n
    success = asyncio.run(run_migration())
    
    if success:
        # Ejecutar pruebas
        asyncio.run(test_pep_functionality())
        
        print("\nüéØ PR√ìXIMOS PASOS:")
        print("1. Actualizar formularios de cliente para capturar informaci√≥n PEP")
        print("2. Implementar validaciones en el frontend")
        print("3. Configurar alertas autom√°ticas para clientes PEP")
        print("4. Crear reportes de cumplimiento regulatorio")
        print("5. Capacitar al personal sobre identificaci√≥n de PEP")
        
    else:
        print("\n‚ùå La migraci√≥n fall√≥. Revise los errores anteriores.")
        sys.exit(1)

if __name__ == "__main__":
    main()
